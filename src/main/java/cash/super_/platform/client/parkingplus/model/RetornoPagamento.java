/*
 * API de pagamento mobile WPS Brasil
 * <#noparse> ### Objetivo  Este documento tem por objetivo definir a interface de integração entre o sistema Parking Plus Enterprise e Aplicativos para Smartphones. A integração possibilitará o pagamento da estadia dos clientes do estacionamento através desse aplicativo.  ### Integração A integração entre as aplicações será realizada por meio de webservice disponibilizados em ambiente de internet. Esse webservice possibilitará a consulta do valor da estadia dos tickets e o pagamento do ticket do estacionamento utilizando como meio de pagamento o cartão de crédito.  O sistema Parking Plus Enterprise encaminha os dados do cliente para os sistemas Gateway de Pagamento de forma que estes possam solicitar a autorização da cobrança em cartão de crédito, da estadia do estacionamento.  ### Especificação dos Serviços (Webservices) O protocolo de comunicação utilizado para a integração entre o sistema Parking Plus Enterprise e o Aplicativo será o HTTPS. O webservice utilizará a tecnologia REST para o acesso aos serviços, e JSON para o POST e o retorno das informações solicitadas para o webservice. Dessa forma, o aplicativo desenvolvido deverá atender aos requisitos necessários para acessar esses serviços.    ## Mapa de Erros |errorCode |descrição |mensagem padrão | | --- | --- | --- | | 0 | Nenhum erro. |   | | 999 |Utilizado quando alguma exceção não especifica é lançada.| Erro no processamento da solicitação. | |1 | O ticket não foi encontrado no banco do Enterprise. | Ticket não encontrado. | | 2 | Garagem offline no enterprise. | Serviço indisponível no momento. | | 3 | O número do ticket possui CRC inválido. | O número do ticket digitado não é um número de ticket válido. | | 4 |O ticket não foi encontrado no pátio. Ocorre se o ticket já saiu do pátio. Pode ocorrer se um ticket correto(ainda no pátio) não foi sincronizado e um ticket de outra garagem é encontrado mas o mesmo já saiu. | Ticket inválido ou já processado. | | 5* | A garagem não possui uma Loja Virtual Cadastrada. | A Garagem não possui uma Loja Virtual Cadastrada. | | 6 | A garagem não se encontra na whitelist de garagens permitidas da API. | Não é permitida a validação de tickets desta garagem. | | 7 | O ticket já recebeu uma validação hoje. | Você já ganhou seu estacionamento gratuito hoje. | | 8 | O valor do pagamento é inválido. Valor a pagar é maior que o sendo pago. | Valor Inválido. | | 9 | Transação já realizada. idTransacao já existe no banco. | Transação já realizada. | | 10* | A apikey enviada é inválida. | Aplicativo não autorizado! | | 11** | ~~O cartão possui CRC inválido.~~ | ~~O número do Cartão Pré-Pago é inválido.~~ | | 12** | ~~O cartão não foi encontrado no banco.~~ | ~~Cartão Pré-Pago não encontrado.~~ | | 13 | Erro ao descriptografar o cartão de crédito. | Cartão com problema, tente recadastrar. | | 14 | Erro ao tentar se conectar com o gateway de pagamento. | Erro de conexão com o Gateway! | | 15 | Existe alguma restrição para o cartão. | Serviço não autorizado para este cartão! | | 16 | Erro de transação com o gateway. | Sua transação não foi concluída. Aguarde alguns instantes e tente novamente. | | 17 | Emissora do cartão indisponível para o gateway. | Emissor indisponível! Aguarde alguns instantes e tente novamente ou entre em contato com a emissora de seu cartão. | | 18* | Existe algum erro na configuração do gateway. | Pagamento indisponível no momento. | | 19 | Informações do cartão inválidas. | Cartão inválido! Entre em contato com a emissora do seu cartão para mais detalhes. | | 20 | A transação foi negada pelo emissor do cartão. | Transação negada pelo emissor! Entre em contato com a emissora do seu cartão para mais detalhes. | | 21 | Pagamento desabilitado. | O pagamento está momentaneamente desabilitado. | | 22 | Erro ao tentar criptografar o cartão de crédito. | Erro ao criptografar cartão! | | 23 | Erro ao tentar encontrar o cliente no banco de dados. Pode ocorrer se o UDID do cliente for alterado mas o cartão criptografado antigo for utilizado. | Cliente alterado! recadastre o cartão. | | 24 | Erro ao descriptografar um cartão de crédito. | Cartão de crédito com problema, tente recadastrar. | | 25** | ~~O Método chamado foi descontinuado.~~ | ~~Este método foi descontinuado.~~ | | 26 | Id/Chave de garagem não encontrada no sistema | Falha ao encontrar garagem! |    \\* Deve ser corrigido durante a homologação  ** Apenas retornados por métodos internos ou ainda não documentados  </#noparse>
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cash.super_.platform.client.parkingplus.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * RetornoPagamento
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-10T22:06:45.404Z")



public class RetornoPagamento {
  @JsonProperty("cartaoCriptografado")
  private String cartaoCriptografado = null;

  @JsonProperty("comprovante")
  private String comprovante = null;

  @JsonProperty("dataHoraSaida")
  private Long dataHoraSaida = null;

  @JsonProperty("dataPagamento")
  private Long dataPagamento = null;

  @JsonProperty("errorCode")
  private Integer errorCode = null;

  @JsonProperty("mensagem")
  private String mensagem = null;

  @JsonProperty("numeroTicket")
  private String numeroTicket = null;

  @JsonProperty("rps")
  private String rps = null;

  @JsonProperty("serieRps")
  private String serieRps = null;

  @JsonProperty("ticketPago")
  private Boolean ticketPago = null;

  public RetornoPagamento cartaoCriptografado(String cartaoCriptografado) {
    this.cartaoCriptografado = cartaoCriptografado;
    return this;
  }

   /**
   * O cartão criptografado se solicitado
   * @return cartaoCriptografado
  **/
  @ApiModelProperty(value = "O cartão criptografado se solicitado")
  public String getCartaoCriptografado() {
    return cartaoCriptografado;
  }

  public void setCartaoCriptografado(String cartaoCriptografado) {
    this.cartaoCriptografado = cartaoCriptografado;
  }

  public RetornoPagamento comprovante(String comprovante) {
    this.comprovante = comprovante;
    return this;
  }

   /**
   * Texto com o comprovante de pagamento do ticket
   * @return comprovante
  **/
  @ApiModelProperty(required = true, value = "Texto com o comprovante de pagamento do ticket")
  public String getComprovante() {
    return comprovante;
  }

  public void setComprovante(String comprovante) {
    this.comprovante = comprovante;
  }

  public RetornoPagamento dataHoraSaida(Long dataHoraSaida) {
    this.dataHoraSaida = dataHoraSaida;
    return this;
  }

   /**
   * Data e hora permitida para a saída do estacionamento(Unix Epoch em milissegundos)
   * @return dataHoraSaida
  **/
  @ApiModelProperty(required = true, value = "Data e hora permitida para a saída do estacionamento(Unix Epoch em milissegundos)")
  public Long getDataHoraSaida() {
    return dataHoraSaida;
  }

  public void setDataHoraSaida(Long dataHoraSaida) {
    this.dataHoraSaida = dataHoraSaida;
  }

  public RetornoPagamento dataPagamento(Long dataPagamento) {
    this.dataPagamento = dataPagamento;
    return this;
  }

   /**
   * Data do servidor na hora do pagamento(Unix Epoch em milissegundos)
   * @return dataPagamento
  **/
  @ApiModelProperty(required = true, value = "Data do servidor na hora do pagamento(Unix Epoch em milissegundos)")
  public Long getDataPagamento() {
    return dataPagamento;
  }

  public void setDataPagamento(Long dataPagamento) {
    this.dataPagamento = dataPagamento;
  }

  public RetornoPagamento errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Código de erro
   * @return errorCode
  **/
  @ApiModelProperty(required = true, value = "Código de erro")
  public Integer getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }

  public RetornoPagamento mensagem(String mensagem) {
    this.mensagem = mensagem;
    return this;
  }

   /**
   * Mensagem de erro
   * @return mensagem
  **/
  @ApiModelProperty(required = true, value = "Mensagem de erro")
  public String getMensagem() {
    return mensagem;
  }

  public void setMensagem(String mensagem) {
    this.mensagem = mensagem;
  }

  public RetornoPagamento numeroTicket(String numeroTicket) {
    this.numeroTicket = numeroTicket;
    return this;
  }

   /**
   * O número do ticket
   * @return numeroTicket
  **/
  @ApiModelProperty(required = true, value = "O número do ticket")
  public String getNumeroTicket() {
    return numeroTicket;
  }

  public void setNumeroTicket(String numeroTicket) {
    this.numeroTicket = numeroTicket;
  }

  public RetornoPagamento rps(String rps) {
    this.rps = rps;
    return this;
  }

   /**
   * O número do RPS gerado
   * @return rps
  **/
  @ApiModelProperty(required = true, value = "O número do RPS gerado")
  public String getRps() {
    return rps;
  }

  public void setRps(String rps) {
    this.rps = rps;
  }

  public RetornoPagamento serieRps(String serieRps) {
    this.serieRps = serieRps;
    return this;
  }

   /**
   * A série do RPS
   * @return serieRps
  **/
  @ApiModelProperty(required = true, value = "A série do RPS")
  public String getSerieRps() {
    return serieRps;
  }

  public void setSerieRps(String serieRps) {
    this.serieRps = serieRps;
  }

  public RetornoPagamento ticketPago(Boolean ticketPago) {
    this.ticketPago = ticketPago;
    return this;
  }

   /**
   * Se o ticket foi pago
   * @return ticketPago
  **/
  @ApiModelProperty(example = "false", required = true, value = "Se o ticket foi pago")
  public Boolean isTicketPago() {
    return ticketPago;
  }

  public void setTicketPago(Boolean ticketPago) {
    this.ticketPago = ticketPago;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetornoPagamento retornoPagamento = (RetornoPagamento) o;
    return Objects.equals(this.cartaoCriptografado, retornoPagamento.cartaoCriptografado) &&
        Objects.equals(this.comprovante, retornoPagamento.comprovante) &&
        Objects.equals(this.dataHoraSaida, retornoPagamento.dataHoraSaida) &&
        Objects.equals(this.dataPagamento, retornoPagamento.dataPagamento) &&
        Objects.equals(this.errorCode, retornoPagamento.errorCode) &&
        Objects.equals(this.mensagem, retornoPagamento.mensagem) &&
        Objects.equals(this.numeroTicket, retornoPagamento.numeroTicket) &&
        Objects.equals(this.rps, retornoPagamento.rps) &&
        Objects.equals(this.serieRps, retornoPagamento.serieRps) &&
        Objects.equals(this.ticketPago, retornoPagamento.ticketPago);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cartaoCriptografado, comprovante, dataHoraSaida, dataPagamento, errorCode, mensagem, numeroTicket, rps, serieRps, ticketPago);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetornoPagamento {\n");
    
    sb.append("    cartaoCriptografado: ").append(toIndentedString(cartaoCriptografado)).append("\n");
    sb.append("    comprovante: ").append(toIndentedString(comprovante)).append("\n");
    sb.append("    dataHoraSaida: ").append(toIndentedString(dataHoraSaida)).append("\n");
    sb.append("    dataPagamento: ").append(toIndentedString(dataPagamento)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    mensagem: ").append(toIndentedString(mensagem)).append("\n");
    sb.append("    numeroTicket: ").append(toIndentedString(numeroTicket)).append("\n");
    sb.append("    rps: ").append(toIndentedString(rps)).append("\n");
    sb.append("    serieRps: ").append(toIndentedString(serieRps)).append("\n");
    sb.append("    ticketPago: ").append(toIndentedString(ticketPago)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

